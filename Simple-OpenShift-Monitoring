oc login ...
oc project openshift-infra



oc get serviceaccount --all-namespaces | grep infra | grep monitoring

oc create serviceaccount monitoring

oc adm policy add-cluster-role-to-user cluster-reader system:serviceaccount:openshift-infra:monitoring


oc login ...
oc project openshift-infra



oc describe serviceaccount monitoring


oc describe secret monitoring-token-1abc2



$ token="eyJhb...the.179.char.token"
 $ endpoint= https://ocp.my-cluster-url.ukcloud.com:8443
 $ curl -k -H "Authorization: Bearer ${token}" -H 'Accept: application/json' ${endpoint}/api/v1/nodes
 
 
 
 
 
 
 #!/usr/bin/env python3
import argparse
import json
import ssl
import urllib.request
 
def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("--token", "-t", required=True)
    parser.add_argument("--endpoint", "-e", required=True)
    return parser.parse_args()
 
 
def get_all_nodes(endpoint, token):
    """Fetch the nodes data from the openshift cluster"""
    request = urllib.request.Request(endpoint + "/api/v1/nodes")
    request.add_header('Authorization', 'Bearer ' + token)
    request.add_header('Accept', 'application/json')
    ssl_context = None  # or ssl._create_unverified_context() for an insecure connection
    result = urllib.request.urlopen(request, context=ssl_context)
    return result.read()
 
 
def get_status_from_node(data_item):
    """ Extract the status conditions from the data"""
    addresses = data_item['status']['addresses']
    address = None
    for addr in addresses:
        if addr['type'] == 'Hostname':
            address = addr['address']
    return {'hostname': address,
            'conditions': data_item['status']['conditions']}
 
 
def find_faults(cond_data):
    """ find whether each node is in a failed state"""
    cells = []
    for node in cond_data:
        hostname = node['hostname']
        state = 'OK  '
        for cond in node['conditions']:
            if cond['status'] != "False" and cond['type'] != "Ready":
                state = 'FAIL'
            elif cond['status'] != "True" and cond['type'] == "Ready":
                state = 'FAIL'
        cells.append('{} {} '.format(state, hostname))
    return cells
 
 
def main():
    args = parse_args()
    all_nodes = json.loads(get_all_nodes(args.endpoint, args.token))
    all_conditions = []
    for node in all_nodes['items']:
        all_conditions.append(get_status_from_node(node))
    print("Status of Cluster at {}".format(args.endpoint))
    for node in find_faults(all_conditions):
        print(node)
 
 
main()
